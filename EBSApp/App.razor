@namespace EBSApp
@using EBSApp.Shared

@inject EBSApp.Models.TokenStore TokenStore
@inject EBSApp.Models.UserStore UserStore
@inject AuthenticationStateProvider AuthStateProvider 
@using System.Security.Claims;

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthStateProvider.GetAuthenticationStateAsync();

        TokenStore.AccessToken = GetClaim(authState, "accessToken");

        UserStore.ClientID = GetClaim(authState, "clientId");
        UserStore.FullName = GetClaim(authState, "fullName");
        UserStore.Balance = GetClaim(authState, "balance");

    }

    private string? GetClaim(AuthenticationState authState, string claimName)
    {
        Claim? claim = authState.User.Claims.ToList().Find(x => x.Type == claimName);

        if (claim == null)
            return null;

        return claim.Value;
    }
}